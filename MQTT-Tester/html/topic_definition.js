const Header_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/Header', messageType: 'std_msgs/msg/Header'});
const Header_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/Header', messageType: 'std_msgs/msg/Header'});
const Int8MultiArray_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/Int8MultiArray', messageType: 'std_msgs/msg/Int8MultiArray'});
const Int8MultiArray_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/Int8MultiArray', messageType: 'std_msgs/msg/Int8MultiArray'});
const UInt8MultiArray_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/UInt8MultiArray', messageType: 'std_msgs/msg/UInt8MultiArray'});
const UInt8MultiArray_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/UInt8MultiArray', messageType: 'std_msgs/msg/UInt8MultiArray'});
const Int16MultiArray_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/Int16MultiArray', messageType: 'std_msgs/msg/Int16MultiArray'});
const Int16MultiArray_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/Int16MultiArray', messageType: 'std_msgs/msg/Int16MultiArray'});
const UInt16MultiArray_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/UInt16MultiArray', messageType: 'std_msgs/msg/UInt16MultiArray'});
const UInt16MultiArray_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/UInt16MultiArray', messageType: 'std_msgs/msg/UInt16MultiArray'});
const Int32MultiArray_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/Int32MultiArray', messageType: 'std_msgs/msg/Int32MultiArray'});
const Int32MultiArray_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/Int32MultiArray', messageType: 'std_msgs/msg/Int32MultiArray'});
const UInt32MultiArray_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/UInt32MultiArray', messageType: 'std_msgs/msg/UInt32MultiArray'});
const UInt32MultiArray_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/UInt32MultiArray', messageType: 'std_msgs/msg/UInt32MultiArray'});
const Transform_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/Transform', messageType: 'geometry_msgs/msg/Transform'});
const Transform_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/Transform', messageType: 'geometry_msgs/msg/Transform'});
const TransformStamped_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TransformStamped', messageType: 'geometry_msgs/msg/TransformStamped'});
const TransformStamped_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TransformStamped', messageType: 'geometry_msgs/msg/TransformStamped'});
const Vector3_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/Vector3', messageType: 'geometry_msgs/msg/Vector3'});
const Vector3_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/Vector3', messageType: 'geometry_msgs/msg/Vector3'});
const Quaternion_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/Quaternion', messageType: 'geometry_msgs/msg/Quaternion'});
const Quaternion_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/Quaternion', messageType: 'geometry_msgs/msg/Quaternion'});
const Joy_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/Joy', messageType: 'sensor_msgs/msg/Joy'});
const Joy_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/Joy', messageType: 'sensor_msgs/msg/Joy'});
const ParentBind_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/ParentBind', messageType: 'triorb_collaboration_interface/msg/ParentBind'});
const ParentBind_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/ParentBind', messageType: 'triorb_collaboration_interface/msg/ParentBind'});
const BoundingBox_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/BoundingBox', messageType: 'triorb_cv_interface/msg/BoundingBox'});
const BoundingBox_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/BoundingBox', messageType: 'triorb_cv_interface/msg/BoundingBox'});
const Detection_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/Detection', messageType: 'triorb_cv_interface/msg/Detection'});
const Detection_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/Detection', messageType: 'triorb_cv_interface/msg/Detection'});
const DriveGains_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/DriveGains', messageType: 'triorb_drive_interface/msg/DriveGains'});
const DriveGains_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/DriveGains', messageType: 'triorb_drive_interface/msg/DriveGains'});
const MotorParams_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/MotorParams', messageType: 'triorb_drive_interface/msg/MotorParams'});
const MotorParams_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/MotorParams', messageType: 'triorb_drive_interface/msg/MotorParams'});
const MotorStatus_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/MotorStatus', messageType: 'triorb_drive_interface/msg/MotorStatus'});
const MotorStatus_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/MotorStatus', messageType: 'triorb_drive_interface/msg/MotorStatus'});
const Route_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/Route', messageType: 'triorb_drive_interface/msg/Route'});
const Route_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/Route', messageType: 'triorb_drive_interface/msg/Route'});
const TriorbAlignPos3_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TriorbAlignPos3', messageType: 'triorb_drive_interface/msg/TriorbAlignPos3'});
const TriorbAlignPos3_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TriorbAlignPos3', messageType: 'triorb_drive_interface/msg/TriorbAlignPos3'});
const TriorbPos3_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TriorbPos3', messageType: 'triorb_drive_interface/msg/TriorbPos3'});
const TriorbPos3_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TriorbPos3', messageType: 'triorb_drive_interface/msg/TriorbPos3'});
const TriorbPos3Stamped_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TriorbPos3Stamped', messageType: 'triorb_drive_interface/msg/TriorbPos3Stamped'});
const TriorbPos3Stamped_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TriorbPos3Stamped', messageType: 'triorb_drive_interface/msg/TriorbPos3Stamped'});
const TriorbRunPos3_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TriorbRunPos3', messageType: 'triorb_drive_interface/msg/TriorbRunPos3'});
const TriorbRunPos3_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TriorbRunPos3', messageType: 'triorb_drive_interface/msg/TriorbRunPos3'});
const TriorbRunResult_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TriorbRunResult', messageType: 'triorb_drive_interface/msg/TriorbRunResult'});
const TriorbRunResult_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TriorbRunResult', messageType: 'triorb_drive_interface/msg/TriorbRunResult'});
const TriorbRunResultStamped_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TriorbRunResultStamped', messageType: 'triorb_drive_interface/msg/TriorbRunResultStamped'});
const TriorbRunResultStamped_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TriorbRunResultStamped', messageType: 'triorb_drive_interface/msg/TriorbRunResultStamped'});
const TriorbRunState_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TriorbRunState', messageType: 'triorb_drive_interface/msg/TriorbRunState'});
const TriorbRunState_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TriorbRunState', messageType: 'triorb_drive_interface/msg/TriorbRunState'});
const TriorbRunSetting_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TriorbRunSetting', messageType: 'triorb_drive_interface/msg/TriorbRunSetting'});
const TriorbRunSetting_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TriorbRunSetting', messageType: 'triorb_drive_interface/msg/TriorbRunSetting'});
const TriorbRunVel3_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TriorbRunVel3', messageType: 'triorb_drive_interface/msg/TriorbRunVel3'});
const TriorbRunVel3_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TriorbRunVel3', messageType: 'triorb_drive_interface/msg/TriorbRunVel3'});
const TriorbRunVel3Stamped_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TriorbRunVel3Stamped', messageType: 'triorb_drive_interface/msg/TriorbRunVel3Stamped'});
const TriorbRunVel3Stamped_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TriorbRunVel3Stamped', messageType: 'triorb_drive_interface/msg/TriorbRunVel3Stamped'});
const TriorbSetPath_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TriorbSetPath', messageType: 'triorb_drive_interface/msg/TriorbSetPath'});
const TriorbSetPath_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TriorbSetPath', messageType: 'triorb_drive_interface/msg/TriorbSetPath'});
const TriorbSetPos3_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TriorbSetPos3', messageType: 'triorb_drive_interface/msg/TriorbSetPos3'});
const TriorbSetPos3_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TriorbSetPos3', messageType: 'triorb_drive_interface/msg/TriorbSetPos3'});
const TriorbSpeed_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TriorbSpeed', messageType: 'triorb_drive_interface/msg/TriorbSpeed'});
const TriorbSpeed_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TriorbSpeed', messageType: 'triorb_drive_interface/msg/TriorbSpeed'});
const TriorbVel3_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/TriorbVel3', messageType: 'triorb_drive_interface/msg/TriorbVel3'});
const TriorbVel3_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/TriorbVel3', messageType: 'triorb_drive_interface/msg/TriorbVel3'});
const CameraDevice_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/CameraDevice', messageType: 'triorb_sensor_interface/msg/CameraDevice'});
const CameraDevice_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/CameraDevice', messageType: 'triorb_sensor_interface/msg/CameraDevice'});
const DistanceSensor_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/DistanceSensor', messageType: 'triorb_sensor_interface/msg/DistanceSensor'});
const DistanceSensor_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/DistanceSensor', messageType: 'triorb_sensor_interface/msg/DistanceSensor'});
const ImuSensor_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/ImuSensor', messageType: 'triorb_sensor_interface/msg/ImuSensor'});
const ImuSensor_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/ImuSensor', messageType: 'triorb_sensor_interface/msg/ImuSensor'});
const Obstacles_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/Obstacles', messageType: 'triorb_sensor_interface/msg/Obstacles'});
const Obstacles_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/Obstacles', messageType: 'triorb_sensor_interface/msg/Obstacles'});
const CamerasLandmarkInfo_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/CamerasLandmarkInfo', messageType: 'triorb_slam_interface/msg/CamerasLandmarkInfo'});
const CamerasLandmarkInfo_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/CamerasLandmarkInfo', messageType: 'triorb_slam_interface/msg/CamerasLandmarkInfo'});
const CamerasPose_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/CamerasPose', messageType: 'triorb_slam_interface/msg/CamerasPose'});
const CamerasPose_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/CamerasPose', messageType: 'triorb_slam_interface/msg/CamerasPose'});
const PointArrayStamped_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/PointArrayStamped', messageType: 'triorb_slam_interface/msg/PointArrayStamped'});
const PointArrayStamped_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/PointArrayStamped', messageType: 'triorb_slam_interface/msg/PointArrayStamped'});
const PoseDevStamped_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/PoseDevStamped', messageType: 'triorb_slam_interface/msg/PoseDevStamped'});
const PoseDevStamped_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/PoseDevStamped', messageType: 'triorb_slam_interface/msg/PoseDevStamped'});
const UInt32MultiArrayStamped_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/UInt32MultiArrayStamped', messageType: 'triorb_slam_interface/msg/UInt32MultiArrayStamped'});
const UInt32MultiArrayStamped_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/UInt32MultiArrayStamped', messageType: 'triorb_slam_interface/msg/UInt32MultiArrayStamped'});
const XyArrayStamped_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/XyArrayStamped', messageType: 'triorb_slam_interface/msg/XyArrayStamped'});
const XyArrayStamped_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/XyArrayStamped', messageType: 'triorb_slam_interface/msg/XyArrayStamped'});
const ClockSync_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/ClockSync', messageType: 'triorb_static_interface/msg/ClockSync'});
const ClockSync_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/ClockSync', messageType: 'triorb_static_interface/msg/ClockSync'});
const HostStatus_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/HostStatus', messageType: 'triorb_static_interface/msg/HostStatus'});
const HostStatus_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/HostStatus', messageType: 'triorb_static_interface/msg/HostStatus'});
const NodeInfo_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/NodeInfo', messageType: 'triorb_static_interface/msg/NodeInfo'});
const NodeInfo_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/NodeInfo', messageType: 'triorb_static_interface/msg/NodeInfo'});
const RobotError_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/RobotError', messageType: 'triorb_static_interface/msg/RobotError'});
const RobotError_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/RobotError', messageType: 'triorb_static_interface/msg/RobotError'});
const RobotStatus_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/RobotStatus', messageType: 'triorb_static_interface/msg/RobotStatus'});
const RobotStatus_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/RobotStatus', messageType: 'triorb_static_interface/msg/RobotStatus'});
const SettingIPv4_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/SettingIPv4', messageType: 'triorb_static_interface/msg/SettingIPv4'});
const SettingIPv4_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/SettingIPv4', messageType: 'triorb_static_interface/msg/SettingIPv4'});
const SettingROS_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/SettingROS', messageType: 'triorb_static_interface/msg/SettingROS'});
const SettingROS_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/SettingROS', messageType: 'triorb_static_interface/msg/SettingROS'});
const SettingSSID_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/SettingSSID', messageType: 'triorb_static_interface/msg/SettingSSID'});
const SettingSSID_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/SettingSSID', messageType: 'triorb_static_interface/msg/SettingSSID'});
const StringList_sub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/to/StringList', messageType: 'triorb_static_interface/msg/StringList'});
const StringList_pub = new ROS2MQTT.Topic({ ros: ros2mqtt, name: ros_topic_prefix + '/from/StringList', messageType: 'triorb_static_interface/msg/StringList'});
